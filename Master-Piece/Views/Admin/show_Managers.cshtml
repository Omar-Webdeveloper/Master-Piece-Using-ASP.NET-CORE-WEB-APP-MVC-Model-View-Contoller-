@model AllManagersViewModel

@{
    ViewData["Title"] = "Show Managers";
    Layout = "~/Views/Shared/_Admin_Layout.cshtml";
}
<style>
    h2 {
        font-weight: bold;
        color: #2e3b55;
        margin-bottom: 20px;
    }

    .custom-btn {
        color: white;
        border: none;
        padding: 10px;
        border-radius: 8px;
        cursor: pointer;
        font-size: 0.95rem;
        transition: background-color 0.3s ease, transform 0.2s ease;
        min-width: 120px;
        text-align: center;
        display: inline-block;
    }

        .custom-btn:hover {
            transform: scale(1.05);
        }

        .custom-btn.add {
            background-color: #3498db;
            margin-bottom: 15px;
        }

            .custom-btn.add:hover {
                background-color: #2980b9;
            }

        .custom-btn.edit {
            background-color: #34495e;
        }

            .custom-btn.edit:hover {
                background-color: #2c3e50;
            }

        .custom-btn.delete {
            background-color: #e74c3c;
        }

            .custom-btn.delete:hover {
                background-color: #c0392b;
            }

        .custom-btn.cancel {
            background-color: #7f8c8d;
        }

            .custom-btn.cancel:hover {
                background-color: #636e72;
            }

    table {
        width: 100%;
        border-collapse: collapse;
        background-color: white;
    }

        table thead th {
            background-color: #2e3b55;
            color: white;
            font-size: 1.1rem;
            padding: 15px;
            text-align: left;
        }

        table tbody td {
            font-size: 0.95rem;
            padding: 12px;
            border-bottom: 1px solid #ddd;
        }

        table tbody tr:hover {
            background-color: #f5f7fa;
            cursor: pointer;
        }

    .action-buttons {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }

    .popup-container {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(6px);
        -webkit-backdrop-filter: blur(6px);
        display: none;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .popup {
        background: #fff;
        padding: 30px 40px;
        border-radius: 10px;
        width: 600px;
        max-width: 95%;
        max-height: 90vh; /* ✅ Add this */
        overflow-y: auto; /* ✅ Add this */
        box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        position: relative;
        text-align: left;
    }

        .popup h3 {
            color: #2e3b55;
            margin-bottom: 20px;
        }

    /* .form-group label { */
    /*     font-weight: 600; */
    /*     color: #2e3b55; */
    /* } */
    .form-group label {
        font-weight: 600;
        color: #2e3b55;
        display: block; /* Makes label span full width */
        margin-bottom: 6px; /* Adds space below label */
        font-size: 0.92rem;
    }

    .form-group {
        margin-bottom: 20px;
        display: flex;
        flex-direction: column;
    }



    /* .form-control { */
    /*     padding: 10px; */
    /*     border: 1px solid #ccc; */
    /*     border-radius: 6px; */
    /*     font-size: 0.95rem; */
    /* } */
    .form-control {
        width: 100%;
        padding: 10px 12px;
        border: 1px solid #ccc;
        border-radius: 6px;
        font-size: 0.95rem;
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
        background-color: #fdfdfd;
    }

        .form-control:focus {
            border-color: #3498db;
            box-shadow: 0 0 4px rgba(52, 152, 219, 0.4);
            outline: none;
        }

    .close-btn {
        position: absolute;
        top: 10px;
        right: 15px;
        font-size: 22px;
        cursor: pointer;
        color: #333;
    }

    .popup-buttons {
        margin-top: 20px;
        display: flex;
        justify-content: center;
        gap: 15px;
        flex-wrap: wrap;
    }

    body.popup-open {
        overflow: hidden;
    }

    .error-message {
        color: #d93025;
        font-size: 0.875rem;
        margin-top: 4px;
        display: block;
    }

</style>

      

<h2>Managers List</h2>
<!-- Add Manager Button -->
<button class="custom-btn add" onclick="openAddManagerPopup()">Add Manager</button>
<!-- Add Manager Popup -->
<div id="addManagerPopup" class="popup-container">
    <div class="popup">
        <span class="close-btn" onclick="closeAddManagerPopup()">&times;</span>
        <h3>Add Manager</h3>
        <form method="post" asp-action="Add_Manager" enctype="multipart/form-data">
            <div class="form-group">
                <label>First Name</label>
                <input type="text" name="AllManagers.FirstName" class="form-control" oninput="validateManagerFirstName()" required />
                <span id="ManagerFirstNameError" class="error-message"></span>

            </div>
            <div class="form-group">
                <label>Last Name</label>
                <input type="text" name="AllManagers.LastName" class="form-control" oninput="validateManagerLastName()" required />
                <span id="ManagerLastNameError" class="error-message"></span>

            </div>
            <div class="form-group">
                <label>Email</label>
                <input type="email" name="AllManagers.Email" class="form-control" oninput="validateManagerEmail()" required />
                <span id="ManagerEmailError" class="error-message"></span>

            </div>
            <div class="form-group">
                <label>Password</label>
                <input type="password" name="AllManagers.PasswordHash" class="form-control" oninput="validateManagerPasswordHash()" required />
                <span id="ManagerPasswordHashError" class="error-message"></span>

            </div>
            <div class="form-group">
                <label>Address</label>
                <input type="text" name="AllManagers.PersonalAddress" class="form-control" oninput="validateManagerAddress()" />
                <span id="ManagerAddressError" class="error-message"></span>

            </div>
            <div class="form-group">
                <label>Phone</label>
                <input type="text" name="AllManagers.PhoneNumber" class="form-control" oninput="validateManagerPhone()" />
                <span id="ManagerPhoneError" class="error-message"></span>
            </div>
            <div class="form-group">
                <label>Gender</label>
                <select name="AllManagers.Gender" class="form-control" onchange="validateManagerGender()">
                    <option value="">Select Gender</option>
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                </select>
                <span id="ManagerGenderError" class="error-message"></span>
            </div>
            <div class="form-group">
                <label>Date of Birth</label>
                <input type="date" name="AllManagers.DateOfBirth" class="form-control" onchange="validateManagerDOB()" />
                <span id="ManagerDOBError" class="error-message"></span>

            </div>
            <div class="form-group">
                <label>Profile Image</label>
                <input type="file" name="PersonalImage" class="form-control" />
            </div>
            <button type="submit" class="custom-btn add">Add Manager</button>
        </form>
        <!-- End Form Content -->
    </div>
</div>
<!-- Managers Table -->
<h3>New Managers</h3>
<table class="table table-bordered table-hover">
    <thead class="table-dark">
        <tr>
            <th>Full Name</th>
            <th>Email</th>
            <th>Password Hash</th>
            <th>Created At</th>
            <th>Profile Image</th>
            <th>Address</th>
            <th>Date of Birth</th>
            <th>Phone</th>
            <th>Gender</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var manager in Model.Managers.Where(Location => Location.LocationId == null || Location.LocationId == 0))
        {
            <tr>
                <td>@manager.FirstName @manager.LastName</td>
                <td>@manager.Email</td>
                <td>@manager.PasswordHash</td>
                <td>@manager.CreatedAt?.ToString("yyyy-MM-dd")</td>
                <td>
                    @if (manager.PersonalImage != null)
                    {
                        var base64 = Convert.ToBase64String(manager.PersonalImage);
                        var imgSrc = $"data:image/png;base64,{base64}";
                        <img src="@imgSrc" alt="Profile Image" style="width: 60px; height: 60px; border-radius: 50%;" />
                    }
                    else
                    {
                        <span>No Image</span>
                    }
                </td>
                <td>@manager.PersonalAddress</td>
                <td>@manager.DateOfBirth?.ToString("yyyy-MM-dd")</td>
                <td>@manager.PhoneNumber</td>
                <td>@manager.Gender</td>
                <td class="action-buttons">
                    <!-- Inside table Actions column -->

                    <button class="custom-btn edit" onclick="openEditManagerPopup(@manager.UserId, '@(Model.Locations.FirstOrDefault(l => l.LocationId == manager.LocationId)?.AreasCovered)')">Edit</button>
                    <button class="custom-btn delete" onclick="openDeleteManagerPopup(@manager.UserId)">Delete</button>

                </td>
            </tr>
        }
    </tbody>
</table>

<h3>Assigned Managers</h3>
<table class="table table-bordered table-hover">
    <thead class="table-dark">
        <tr>
            <th>Full Name</th>
            <th>Email</th>
            <th>Password Hash</th>
            <th>Created At</th>
            <th>Profile Image</th>
            <th>Address</th>
            <th>Date of Birth</th>
            <th>Phone</th>
            <th>Gender</th>
            <th>Areas Covered</th> <!-- Updated column header -->
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var manager in Model.Managers.Where(Location => Location.LocationId != null && Location.LocationId != 0))
        {
            <tr>
                <td>@manager.FirstName @manager.LastName</td>
                <td>@manager.Email</td>
                <td>@manager.PasswordHash</td>
                <td>@manager.CreatedAt?.ToString("yyyy-MM-dd")</td>
                <td>
                    @if (manager.PersonalImage != null)
                    {
                        var base64 = Convert.ToBase64String(manager.PersonalImage);
                        var imgSrc = $"data:image/png;base64,{base64}";
                        <img src="@imgSrc" alt="Profile Image" style="width: 60px; height: 60px; border-radius: 50%;" />
                    }
                    else
                    {
                        <span>No Image</span>
                    }
                </td>
                <td>@manager.PersonalAddress</td>
                <td>@manager.DateOfBirth?.ToString("yyyy-MM-dd")</td>
                <td>@manager.PhoneNumber</td>
                <td>@manager.Gender</td>
                <td>@Model.Locations.FirstOrDefault(l => l.LocationId == manager.LocationId)?.AreasCovered</td>
                <td class="action-buttons">
                    <!-- Inside table Actions column -->
                     
                        <button class="custom-btn edit" onclick="openEditManagerPopup(@manager.UserId, '@(Model.Locations.FirstOrDefault(l => l.LocationId == manager.LocationId)?.AreasCovered)')">Edit</button>
                        <button class="custom-btn delete" onclick="openDeleteManagerPopup(@manager.UserId)">Delete</button>
                    
                </td>
            </tr>
        }
    </tbody>
</table>


<!-- Delete Manager Popup -->
<div id="deleteManagerPopup" class="popup-container">
    <div class="popup">
        <span class="close-btn" onclick="closeDeleteManagerPopup()">&times;</span>
        <h3>Delete Manager</h3>
        <p>Are you sure you want to delete this manager?</p>
        <form method="post" asp-action="Delete_Manager">
            <input type="hidden" id="deleteManagerId" name="id" />
            <!-- Delete Popup Buttons -->
            <button type="submit" class="custom-btn delete">Delete</button>
            <button type="button" class="custom-btn cancel" onclick="closeDeleteManagerPopup()">Cancel</button>

        </form>
    </div>
</div>

<script>
    function openDeleteManagerPopup(managerId) {
        document.getElementById("deleteManagerId").value = managerId;
        document.getElementById("deleteManagerPopup").style.display = "flex";
    }

    function closeDeleteManagerPopup() {
        document.getElementById("deleteManagerPopup").style.display = "none";
    }
</script>
<script>
    function openAddManagerPopup() {
        document.getElementById("addManagerPopup").style.display = "flex";
    }

    function closeAddManagerPopup() {
        document.getElementById("addManagerPopup").style.display = "none";
    }
</script>



<!-- Edit Manager Popup -->
<div id="editManagerPopup" class="popup-container">
    <div class="popup">
        <span class="close-btn" onclick="closeEditManagerPopup()">&times;</span>
        <h3>Edit Manager Location</h3>
        <form method="post" asp-action="Update_Manager_Location">
            <input type="hidden" id="editManagerId" name="UserId" />

            <div class="form-group">
                <label>Current Location</label>
                <input type="text" id="currentLocation" class="form-control" disabled />
            </div>

            <div class="form-group">
                <label>Select New Location</label>
                <select name="LocationId" id="editLocationId" class="form-control" >
                    <option value="">Select New Location</option>
                    @foreach (var location in Model.Locations)
                    {
                        <option value="@location.LocationId">@location.AreasCovered</option>
                    }
                </select>

            </div>

            <!-- Edit Popup Submit -->
            <button type="submit" class="custom-btn edit">Save Changes</button>
        </form>
    </div>
</div>

<!-- JavaScript Functions -->
<script>
    function openEditManagerPopup(managerId, currentLocation) {
        document.getElementById("editManagerId").value = managerId;
        document.getElementById("currentLocation").value = currentLocation;
        document.getElementById("editManagerPopup").style.display = "flex";
    }

    function closeEditManagerPopup() {
        document.getElementById("editManagerPopup").style.display = "none";
    }
</script>


<script>
    // ====== VALIDATION FUNCTIONS ======

    function validateManagerFirstName() {
        const input = document.querySelector('input[name="AllManagers.FirstName"]');
        const error = document.getElementById("ManagerFirstNameError");
        error.textContent = !input.value.trim() ? "First name is required." : "";
    }

    function validateManagerLastName() {
        const input = document.querySelector('input[name="AllManagers.LastName"]');
        const error = document.getElementById("ManagerLastNameError");
        error.textContent = !input.value.trim() ? "Last name is required." : "";
    }

    function validateManagerEmail() {
        const input = document.querySelector('input[name="AllManagers.Email"]');
        const error = document.getElementById("ManagerEmailError");
        if (!input.value.trim()) {
            error.textContent = "Email is required.";
        } else {
            error.textContent = "";
        }
    }

    function validateManagerPasswordHash() {
        const input = document.querySelector('input[name="AllManagers.PasswordHash"]');
        const error = document.getElementById("ManagerPasswordHashError");
        const val = input.value.trim();
        if (!val) {
            error.textContent = "Password is required.";
        } else if (val.length < 8 || val.length > 50) {
            error.textContent = "Password must be between 8 and 50 characters.";
        } else {
            error.textContent = "";
        }
    }

    function validateManagerPhone() {
        const input = document.querySelector('input[name="AllManagers.PhoneNumber"]');
        const error = document.getElementById("ManagerPhoneError");
        const regex = /^\+962\d{9}$/;
        if (!input.value.trim()) {
            error.textContent = "Phone number is required.";
        } else if (!regex.test(input.value.trim())) {
            error.textContent = "Phone must start with +962 followed by 9 digits.";
        } else {
            error.textContent = "";
        }
    }

    function validateManagerGender() {
        const select = document.querySelector('select[name="AllManagers.Gender"]');
        const error = document.getElementById("ManagerGenderError");
        error.textContent = !select.value ? "Gender is required." : "";
    }

    function validateManagerDOB() {
        const input = document.querySelector('input[name="AllManagers.DateOfBirth"]');
        const error = document.getElementById("ManagerDOBError");
        error.textContent = !input.value ? "Date of Birth is required." : "";
    }

    function validateManagerAddress() {
        const input = document.querySelector('input[name="AllManagers.PersonalAddress"]');
        const error = document.getElementById("ManagerAddressError");
        const val = input.value.trim();
        const parts = val.split(',');
        if (!val) {
            error.textContent = "Address is required.";
        } else if (parts.length < 3) {
            error.textContent = "Address must include city, governorate, and street.";
        } else {
            error.textContent = "";
        }
    }



    // ========== ADD FORM VALIDATION ON SUBMIT ==========

    document.querySelector('#addManagerPopup form')?.addEventListener("submit", function (e) {
        validateManagerFirstName();
        validateManagerLastName();
        validateManagerEmail();
        validateManagerPasswordHash();
        validateManagerPhone();
        validateManagerGender();
        validateManagerDOB();
        validateManagerAddress();
        validateManagerLocation();

        const hasErrors = Array.from(document.querySelectorAll("#addManagerPopup .error-message")).some(span => span.textContent !== "");
        if (hasErrors) {
            e.preventDefault();
            alert("Please fix the errors before submitting the form.");
        }
    });


</script>
